// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var _, addNewlineToBr, convertToText, formatter, linksToText, removeFewwordsParagraphs, removeNegativescoresNodes, replaceWithText, stopwords;
  stopwords = require('./stopwords');
  _ = require('lodash');
  module.exports = formatter = function (doc, topNode, language) {
    removeNegativescoresNodes(doc, topNode);
    linksToText(doc, topNode);
    addNewlineToBr(doc, topNode);
    replaceWithText(doc, topNode);
    removeFewwordsParagraphs(doc, topNode, language);
    return convertToText(doc, topNode);
  };
  linksToText = function (doc, topNode) {
    var nodes;
    nodes = topNode.find('a');
    return nodes.each(function () {
      return doc(this).replaceWith(doc(this).html());
    });
  };
  replaceWithText = function (doc, topNode) {
    var nodes;
    nodes = topNode.find('b, strong, i, br, sup');
    return nodes.each(function () {
      return doc(this).replaceWith(doc(this).text());
    });
  };
  convertToText = function (doc, topNode) {
    var nodes, txts;
    txts = [];
    nodes = topNode.children();
    nodes.each(function () {
      var node, txt;
      node = doc(this);
      txt = node.text().trim();
      txt.replace(/[\s\t]+/g, ' ');
      return txts = txts.concat(txt.split(/\r?\n/));
    });
    txts = _.map(txts, function (txt) {
      return txt.trim();
    });
    txts = _.filter(txts, function (txt) {
      return /[a-zA-Z0-9]/.test(txt);
    });
    return txts.join('\n\n');
  };
  addNewlineToBr = function (doc, topNode) {
    var brs;
    brs = topNode.find('br');
    return brs.each(function () {
      var br;
      br = doc(this);
      return br.replaceWith('\n\n');
    });
  };
  removeNegativescoresNodes = function (doc, topNode) {
    var gravityItems;
    gravityItems = topNode.find('*[gravityScore]');
    return gravityItems.each(function () {
      var item, score;
      item = doc(this);
      score = parseInt(item.attr('gravityScore')) || 0;
      if (score < 1)
        return doc(item).remove();
    });
  };
  removeFewwordsParagraphs = function (doc, topNode, language) {
    var allNodes;
    allNodes = topNode.find('*');
    return allNodes.each(function () {
      var el, stopWords, tag, text, trimmed;
      el = doc(this);
      tag = el[0].name;
      text = el.text();
      stopWords = stopwords(text, language);
      if ((tag !== 'br' || text !== '\\r') && stopWords.stopwordCount < 3 && el.find('object').length === 0 && el.find('embed').length === 0) {
        return doc(el).remove();
      } else {
        trimmed = text.trim();
        if (trimmed[0] === '(' && trimmed[trimmed.length - 1] === ')')
          return doc(el).remove();
      }
    });
  };
}.call(this);
